package array;

public class Array1Ref1 {
    public static void main(String[] args) {
        int[] students;  //배열 변수 선언
        students = new int[5];  //동적 할당

        students[0] = 90;
        students[1] = 80;
        students[2] = 70;
        students[3] = 60;
        students[4] = 50;
        //배열의 편리한 초기화
        //students = new int[]{90, 80, 70, 60, 50} //이렇게 대체할 수도 있다. 다만, 배열 선언과 동시에 해야한다. 아니면 오류 발생

        //오류
        //int[] students;
        //students = {90, 80, 70, 60, 50};

        for(int i = 0 ; i< students.length; i++){
            System.out.println("학생"+(i+1)+" 점수:"+students[i]);
        }
        // ### 1. 배열 변수 선언
        //* 배열을 사용하려면 int[] students; 와 같이 배열 변수를 선언해야 한다.
        //* 일반적인 변수와 차이점은 `int[]`처럼 타입 다음에 대괄호(`[]`)가 들어간다는 점이다.
        //* 배열 변수를 선언한다고해서 아직 사용할 수 있는 배열이 만들어진 것은 아니다.
        //  * `int a`에는 정수를, `double b`에는 실수를 담을 수 있다.
        //  * `int[] students`와 같은 배열 변수에는 배열을 담을 수 있다. (배열 변수에는 10, 20 같은 값이 아니라 배열이라는 것을 담을 수 있다)


        // ### 2. 배열 생성
        //* 배열을 사용하려면 배열을 생성해야 한다.
        //* `new int[5]`라고 입력하면 오른쪽 그림과 같이 총 5개의 `int`형 변수가 만들어진다.
        //* `new`는 새로 생성한다는 뜻이고, `int[5]`는 `int`형 변수 5개라는 뜻이다. 따라서 `int`형 변수 5개를 다룰 수 있는 배열을 새로 만든다는 뜻이다.

        // ### 3. 배열과 초기화
        // * `new int[5]`라고 하면 총 5개의 `int`형 변수가 만들어진다. 자바는 배여릉ㄹ 생성할 때 그 내부값을 자동으로 초기화한다.
        // * 숫자는 `0`, `boolean`은 `false`, `String`은 `null`(없다는 뜻이다)로 초기화 된다.


        // ### 3. 배열 참조값 보관
        //* `new int[5]`로 배열을 생성하면 배열의 크기만큼 메모리를 확보한다.
        //  * `int`형을 5개 사용하면 `4byte  * 5` -> `20byte`를 확보한다.
        //* 배열을 생성하고 나면 자바는 메모리 어딘가에 있는 이 배열에 접근할 수 있는 참조값(주소)(`x001`)을 반환한다.
        //  * 여기서 `x001`이라고 표현한 것이 참조값이다.
        //* 앞서 선언한 배열 변수인 `int[] students`에 생성된 배열의 참조값(`x001`)을 보관한다.
        //* `int[] students`변수는 `new int[5]`로 생성한 배열의 참조값을 가지고 있다.
        //  * 이 변수는 참조값을 가지고 있다. 이 참조값을 통해 배열을 참조할 수 있다. 쉽게 이야기해서 참조값으 ㄹ통해 메모리에 있는 실제 배열에 접근하고 사용할 수 있다.
        //  * 참고로 배열을 생성하는 `new int[5]`자체에는 아무런 이름이 없다! 그냥 `int`형 변수를 5개 연속으로 만드는 것이다.
        //     따라서 생성한 배열에 접근하는 방법이 필요하다. 따라서 배열을 생성할 때 반환되는 참조값을 어딘가에 보관해두어야한다.
        //     앞서 `int[] students`변수에 참조값(`x001`)을 보관해두었다. 이 변수를 통해서 이 배열에 접근할 수 있다.


        //### 배열 값 읽기
        //1. 변수 값 읽기
        //System.out.println("학생 1 점수: "+ students[0]);
        //2. 변수에 있는 참조값을 통해 실제 배열에 접근, 인덱스를 사용해서 해당 위치의 요소에 접근
        //System.out.println("학생1 점수: + x001[0]);
        //3. 배열의 값을 읽어옴
        //System.out.println("학생1 점수: "+ 90);


        //### 기본형 vs 참조형
        //자바의 변수 데이터 타입을 가장 크게 보면 기본형과 참조형으로 분류할 수 있다. 사용하는 값을 직접 넣을 수 있는 기본형, 그리고 방금 본
        //배열 변수와 같이 메모리의 참조값을 넣을 수 있는 참조형으로 분류할 수 있다.
        //* 기본형(Primitive Type): 우리가 지금까지 봤던 `int`, `long`, `double`, `boolean`처럼 변수에 사용할 값을 직접 넣을 수 있는 데이터 타입을 기본형(Primitive Type)이라 한다.
        //* 참조형(Reference Type): `int[] students`와 같이 데이터에 접근하기 위한 참조(주소)를 저장하는 데이터 타입을 참조형(Reference Type)이라 한다.
        // 뒤에서 학습하는 객체나 클래스를 담을 수 있는 변수들도 모두 참조형이다.
        //* 기본형은 선언과 동시에 크기가 정해진다. 따라서 크기를 동적으로 바꾸거나 할 수는 없다. 반면에 앞서본 배열과 같은 참조형은
        //크기를 동적으로 할당할 수 있다. 예를 들어서 `Scanner`를 사용해서 사용자의 입력에 따라 `size`변수의 값이 변하고, 생성되는 배열의 크기도 달라질 수 있다.
        //이런 것을 동적 메모리 할당이라 한다. 기본형은 선언과 동시에 사이즈가 정적을 정해지지만, 참조형을 사용하면 이처럼 동적을 크기가 변해서 유연성을 제공할 수 있다.
        //* 기본형은 사용할 값을 직접 저장한다. 반면에 참조형은 메모리에 저장된 배열이나 객체의 참조를 저장한다. 이로 인해 참조형은 더 복잡한 데이터 구조를 만들고 관리할 수 있다.
        //반면 기본형은 더 빠르고 메모리를 효율적으로 처리한다.


    }
}
